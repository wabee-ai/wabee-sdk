#!/bin/bash -e

# The assemble script builds the application
echo "Starting assemble script..."

# Ensure source directory exists
if [ ! -d "/tmp/src" ]; then
    echo "Creating /tmp/src directory"
    mkdir -p /tmp/src
fi

# If source is in current directory, copy it
if [ -f "./pyproject.toml" ]; then
    echo "Found source in current directory, copying to /tmp/src"
    cp -r . /tmp/src/
fi

cd /tmp/src

# Install dependencies using poetry
if [ -f pyproject.toml ]; then
    echo "Found pyproject.toml"
    echo "Installing dependencies with Poetry..."
    poetry install --no-interaction --no-ansi --verbose
else
    echo "No pyproject.toml found!"
    exit 1
fi

# Create app directory and copy files
mkdir -p /app
cp -R . /app/

# Create the server entry point
cat > /app/server.py << 'EOF'
import asyncio
import importlib
import os
from wabee.rpc.server import serve
from typing import Dict, Any

def load_tools() -> Dict[str, Any]:
    tools = {}
    tool_module = os.environ.get('WABEE_TOOL_MODULE', 'tool')
    tool_name = os.environ.get('WABEE_TOOL_NAME', 'tool')
    
    print(f"Loading tool module: {tool_module}")
    print(f"Loading tool name: {tool_name}")
    
    try:
        module = importlib.import_module(tool_module)
        tool = getattr(module, tool_name)
        tools[tool_name] = tool
    except Exception as e:
        print(f"Error loading tool: {str(e)}")
        raise
        
    return tools

def main():
    port = int(os.environ.get('WABEE_GRPC_PORT', '50051'))
    tools = load_tools()
    print(f"Starting gRPC server with tools: {list(tools.keys())}")
    asyncio.run(serve(tools, port=port))

if __name__ == '__main__':
    main()
EOF

# Ensure proper permissions
chown -R wabee:wabee /app
chmod +x /app/server.py
