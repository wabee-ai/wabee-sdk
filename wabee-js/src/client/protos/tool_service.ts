// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.28.3
// source: tool_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "wabee.tools";

/** Common types we might need */
export interface Int64Value {
  value: number;
}

export interface StringValue {
  value: string;
}

export interface FloatValue {
  value: number;
}

export interface ExecuteRequest {
  toolName: string;
  /** For backwards compatibility */
  jsonData?:
    | string
    | undefined;
  /** For dynamic proto encoding */
  protoData?: Uint8Array | undefined;
}

export interface ExecuteResponse {
  /** For backwards compatibility */
  jsonResult?:
    | string
    | undefined;
  /** For dynamic proto encoding */
  protoResult?: Uint8Array | undefined;
  error: ToolError | undefined;
}

export interface ToolError {
  type: string;
  message: string;
}

export interface GetToolSchemaRequest {
  toolName: string;
}

export interface ToolSchema {
  toolName: string;
  description: string;
  fields: FieldSchema[];
}

export interface FieldSchema {
  name: string;
  type: string;
  required: boolean;
  description: string;
}

function createBaseInt64Value(): Int64Value {
  return { value: 0 };
}

export const Int64Value = {
  encode(message: Int64Value, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int64(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Int64Value {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInt64Value();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Int64Value {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: Int64Value): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Int64Value>, I>>(base?: I): Int64Value {
    return Int64Value.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Int64Value>, I>>(object: I): Int64Value {
    const message = createBaseInt64Value();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseStringValue(): StringValue {
  return { value: "" };
}

export const StringValue = {
  encode(message: StringValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StringValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStringValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StringValue {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: StringValue): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StringValue>, I>>(base?: I): StringValue {
    return StringValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StringValue>, I>>(object: I): StringValue {
    const message = createBaseStringValue();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseFloatValue(): FloatValue {
  return { value: 0 };
}

export const FloatValue = {
  encode(message: FloatValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FloatValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFloatValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FloatValue {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: FloatValue): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FloatValue>, I>>(base?: I): FloatValue {
    return FloatValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FloatValue>, I>>(object: I): FloatValue {
    const message = createBaseFloatValue();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseExecuteRequest(): ExecuteRequest {
  return { toolName: "", jsonData: undefined, protoData: undefined };
}

export const ExecuteRequest = {
  encode(message: ExecuteRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.toolName !== "") {
      writer.uint32(10).string(message.toolName);
    }
    if (message.jsonData !== undefined) {
      writer.uint32(18).string(message.jsonData);
    }
    if (message.protoData !== undefined) {
      writer.uint32(26).bytes(message.protoData);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExecuteRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.toolName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jsonData = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.protoData = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteRequest {
    return {
      toolName: isSet(object.toolName) ? globalThis.String(object.toolName) : "",
      jsonData: isSet(object.jsonData) ? globalThis.String(object.jsonData) : undefined,
      protoData: isSet(object.protoData) ? bytesFromBase64(object.protoData) : undefined,
    };
  },

  toJSON(message: ExecuteRequest): unknown {
    const obj: any = {};
    if (message.toolName !== "") {
      obj.toolName = message.toolName;
    }
    if (message.jsonData !== undefined) {
      obj.jsonData = message.jsonData;
    }
    if (message.protoData !== undefined) {
      obj.protoData = base64FromBytes(message.protoData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecuteRequest>, I>>(base?: I): ExecuteRequest {
    return ExecuteRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecuteRequest>, I>>(object: I): ExecuteRequest {
    const message = createBaseExecuteRequest();
    message.toolName = object.toolName ?? "";
    message.jsonData = object.jsonData ?? undefined;
    message.protoData = object.protoData ?? undefined;
    return message;
  },
};

function createBaseExecuteResponse(): ExecuteResponse {
  return { jsonResult: undefined, protoResult: undefined, error: undefined };
}

export const ExecuteResponse = {
  encode(message: ExecuteResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.jsonResult !== undefined) {
      writer.uint32(10).string(message.jsonResult);
    }
    if (message.protoResult !== undefined) {
      writer.uint32(18).bytes(message.protoResult);
    }
    if (message.error !== undefined) {
      ToolError.encode(message.error, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExecuteResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jsonResult = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.protoResult = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = ToolError.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteResponse {
    return {
      jsonResult: isSet(object.jsonResult) ? globalThis.String(object.jsonResult) : undefined,
      protoResult: isSet(object.protoResult) ? bytesFromBase64(object.protoResult) : undefined,
      error: isSet(object.error) ? ToolError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ExecuteResponse): unknown {
    const obj: any = {};
    if (message.jsonResult !== undefined) {
      obj.jsonResult = message.jsonResult;
    }
    if (message.protoResult !== undefined) {
      obj.protoResult = base64FromBytes(message.protoResult);
    }
    if (message.error !== undefined) {
      obj.error = ToolError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecuteResponse>, I>>(base?: I): ExecuteResponse {
    return ExecuteResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecuteResponse>, I>>(object: I): ExecuteResponse {
    const message = createBaseExecuteResponse();
    message.jsonResult = object.jsonResult ?? undefined;
    message.protoResult = object.protoResult ?? undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? ToolError.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseToolError(): ToolError {
  return { type: "", message: "" };
}

export const ToolError = {
  encode(message: ToolError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ToolError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToolError {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ToolError): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ToolError>, I>>(base?: I): ToolError {
    return ToolError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ToolError>, I>>(object: I): ToolError {
    const message = createBaseToolError();
    message.type = object.type ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseGetToolSchemaRequest(): GetToolSchemaRequest {
  return { toolName: "" };
}

export const GetToolSchemaRequest = {
  encode(message: GetToolSchemaRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.toolName !== "") {
      writer.uint32(10).string(message.toolName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetToolSchemaRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetToolSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.toolName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetToolSchemaRequest {
    return { toolName: isSet(object.toolName) ? globalThis.String(object.toolName) : "" };
  },

  toJSON(message: GetToolSchemaRequest): unknown {
    const obj: any = {};
    if (message.toolName !== "") {
      obj.toolName = message.toolName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetToolSchemaRequest>, I>>(base?: I): GetToolSchemaRequest {
    return GetToolSchemaRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetToolSchemaRequest>, I>>(object: I): GetToolSchemaRequest {
    const message = createBaseGetToolSchemaRequest();
    message.toolName = object.toolName ?? "";
    return message;
  },
};

function createBaseToolSchema(): ToolSchema {
  return { toolName: "", description: "", fields: [] };
}

export const ToolSchema = {
  encode(message: ToolSchema, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.toolName !== "") {
      writer.uint32(10).string(message.toolName);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.fields) {
      FieldSchema.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ToolSchema {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.toolName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fields.push(FieldSchema.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToolSchema {
    return {
      toolName: isSet(object.toolName) ? globalThis.String(object.toolName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      fields: globalThis.Array.isArray(object?.fields) ? object.fields.map((e: any) => FieldSchema.fromJSON(e)) : [],
    };
  },

  toJSON(message: ToolSchema): unknown {
    const obj: any = {};
    if (message.toolName !== "") {
      obj.toolName = message.toolName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.fields?.length) {
      obj.fields = message.fields.map((e) => FieldSchema.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ToolSchema>, I>>(base?: I): ToolSchema {
    return ToolSchema.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ToolSchema>, I>>(object: I): ToolSchema {
    const message = createBaseToolSchema();
    message.toolName = object.toolName ?? "";
    message.description = object.description ?? "";
    message.fields = object.fields?.map((e) => FieldSchema.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFieldSchema(): FieldSchema {
  return { name: "", type: "", required: false, description: "" };
}

export const FieldSchema = {
  encode(message: FieldSchema, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.required !== false) {
      writer.uint32(24).bool(message.required);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FieldSchema {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.required = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FieldSchema {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      required: isSet(object.required) ? globalThis.Boolean(object.required) : false,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: FieldSchema): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.required !== false) {
      obj.required = message.required;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FieldSchema>, I>>(base?: I): FieldSchema {
    return FieldSchema.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FieldSchema>, I>>(object: I): FieldSchema {
    const message = createBaseFieldSchema();
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.required = object.required ?? false;
    message.description = object.description ?? "";
    return message;
  },
};

export type ToolServiceService = typeof ToolServiceService;
export const ToolServiceService = {
  execute: {
    path: "/wabee.tools.ToolService/Execute",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ExecuteRequest) => Buffer.from(ExecuteRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ExecuteRequest.decode(value),
    responseSerialize: (value: ExecuteResponse) => Buffer.from(ExecuteResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ExecuteResponse.decode(value),
  },
  getToolSchema: {
    path: "/wabee.tools.ToolService/GetToolSchema",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetToolSchemaRequest) => Buffer.from(GetToolSchemaRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetToolSchemaRequest.decode(value),
    responseSerialize: (value: ToolSchema) => Buffer.from(ToolSchema.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ToolSchema.decode(value),
  },
} as const;

export interface ToolServiceServer extends UntypedServiceImplementation {
  execute: handleUnaryCall<ExecuteRequest, ExecuteResponse>;
  getToolSchema: handleUnaryCall<GetToolSchemaRequest, ToolSchema>;
}

export interface ToolServiceClient extends Client {
  execute(
    request: ExecuteRequest,
    callback: (error: ServiceError | null, response: ExecuteResponse) => void,
  ): ClientUnaryCall;
  execute(
    request: ExecuteRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ExecuteResponse) => void,
  ): ClientUnaryCall;
  execute(
    request: ExecuteRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ExecuteResponse) => void,
  ): ClientUnaryCall;
  getToolSchema(
    request: GetToolSchemaRequest,
    callback: (error: ServiceError | null, response: ToolSchema) => void,
  ): ClientUnaryCall;
  getToolSchema(
    request: GetToolSchemaRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ToolSchema) => void,
  ): ClientUnaryCall;
  getToolSchema(
    request: GetToolSchemaRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ToolSchema) => void,
  ): ClientUnaryCall;
}

export const ToolServiceClient = makeGenericClientConstructor(
  ToolServiceService,
  "wabee.tools.ToolService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ToolServiceClient;
  service: typeof ToolServiceService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
